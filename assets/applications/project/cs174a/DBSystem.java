package cs174a;

import java.io.File; 
import java.util.Scanner; 
import java.io.IOException;
import java.io.InputStream;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Properties;

import oracle.jdbc.pool.OracleDataSource;
import oracle.jdbc.OracleConnection;

import java.sql.DatabaseMetaData;
import java.sql.PreparedStatement;
import java.sql.ResultSet;

public class DBSystem{
	public static boolean execute_queries_from_file(String filename, OracleConnection connection){

		boolean all_succeeded = true;

		if(filename.equals("./scripts/create_db.sql")){
			// Create tables

			String query = ("CREATE TABLE customers ( " +
							"c_id VARCHAR(9) NOT NULL, " +
    						"c_name VARCHAR(32), " +
							"address VARCHAR(64), " +
							"encrypted_pin VARCHAR(64) NOT NULL, " +  
							"PRIMARY KEY (c_id) )");
		   	
	  		try( Statement statement = connection.createStatement() ) {
				try{
					int updates = statement.executeUpdate( query );
				}catch(SQLException e){
					e.printStackTrace();
					all_succeeded = false;
				}
			}catch(SQLException e){
				e.printStackTrace();
				all_succeeded = false;
			}

			query = ( "CREATE TABLE accounts ( " +
					  "a_id VARCHAR(32) NOT NULL, "+
						"owner_id VARCHAR(9) NOT NULL, "+
						"account_type VARCHAR(32) NOT NULL, "+
						"bank_branch VARCHAR(32), "+
						"balance FLOAT NOT NULL CHECK (balance>=0), "+
						"is_open NUMBER(1, 0) DEFAULT 0, "+
    					"interest_date VARCHAR(10), "+
						"PRIMARY KEY (a_id), "+
						"FOREIGN KEY (owner_id) REFERENCES customers(c_id) ) " );

			try( Statement statement = connection.createStatement() ) {
				try{
					int updates = statement.executeUpdate( query );

				}catch(SQLException e){
					e.printStackTrace();
					all_succeeded = false;
				}
			}catch(SQLException e){
				e.printStackTrace();
				all_succeeded = false;
			}

			query = ("CREATE TABLE pocketlinks ( "+
					"pocket_id VARCHAR(32) NOT NULL, "+
    				"link_id VARCHAR(32) NOT NULL, "+
					"PRIMARY KEY(pocket_id), "+
					"FOREIGN KEY (pocket_id) REFERENCES accounts(a_id) ON DELETE CASCADE, "+
					"FOREIGN KEY (link_id) REFERENCES accounts(a_id) ON DELETE CASCADE )");
			try( Statement statement = connection.createStatement() ) {
				try{
					int updates = statement.executeUpdate( query );

				}catch(SQLException e){
					e.printStackTrace();
					all_succeeded = false;
				}
			}catch(SQLException e){
				e.printStackTrace();
				all_succeeded = false;
			}

			query = ("CREATE TABLE transactions ( "+
					"t_id INTEGER GENERATED BY DEFAULT ON NULL AS IDENTITY, "+
					"to_acct VARCHAR(32), "+
					"from_acct VARCHAR(32), "+
					"cust_id VARCHAR(9), "+
					"t_date VARCHAR(10), "+
					"t_type VARCHAR(16), "+
					"amount FLOAT, "+
					"PRIMARY KEY(t_id), "+
					"FOREIGN KEY(to_acct) REFERENCES accounts(a_id), "+
					"FOREIGN KEY(from_acct) REFERENCES accounts(a_id), "+
					"FOREIGN KEY(cust_id) REFERENCES customers(c_id), "+
					"CONSTRAINT has_to_or_from CHECK( to_acct IS NOT NULL "+
 									 "OR from_acct IS NOT NULL) )");

			try( Statement statement = connection.createStatement() ) {
				try{
					int updates = statement.executeUpdate( query );

				}catch(SQLException e){
					e.printStackTrace();
					all_succeeded = false;
				}
			}catch(SQLException e){
				e.printStackTrace();
				all_succeeded = false;
			}

			query = ("CREATE TABLE custaccounts ( "+
					"c_id VARCHAR(9) NOT NULL, "+
					"a_id VARCHAR(32) NOT NULL, "+
					"PRIMARY KEY(c_id, a_id), "+
					"FOREIGN KEY(c_id) REFERENCES customers(c_id) ON DELETE CASCADE, "+
					"FOREIGN KEY(a_id) REFERENCES accounts(a_id) ON DELETE CASCADE )");

			try( Statement statement = connection.createStatement() ) {
				try{
					int updates = statement.executeUpdate( query );

				}catch(SQLException e){
					e.printStackTrace();
					all_succeeded = false;
				}
			}catch(SQLException e){
				e.printStackTrace();
				all_succeeded = false;
			}

			query = ("CREATE TABLE bank ( "+
					"b_id INTEGER, "+
					"day VARCHAR(2), "+
					"month VARCHAR(2), "+
					"year VARCHAR(4), "+
					"chk_int_intrst FLOAT, "+
					"sav_intrst FLOAT, "+
					"last_intrst_date VARCHAR(10), "+
					"PRIMARY KEY(b_id) )");

			try( Statement statement = connection.createStatement() ) {
				try{
					int updates = statement.executeUpdate( query );

				}catch(SQLException e){
					e.printStackTrace();
					all_succeeded = false;
				}
			}catch(SQLException e){
				e.printStackTrace();
				all_succeeded = false;
			}

		}else{
			// Drop tables

			String query = "DROP TABLE  customers CASCADE CONSTRAINTS";
	  		try( Statement statement = connection.createStatement() ) {
				try{
					int updates = statement.executeUpdate( query );

				}catch(SQLException e){
					e.printStackTrace();
					all_succeeded = false;
				}
			}catch(SQLException e){
				e.printStackTrace();
				all_succeeded = false;
			}						   

			query = "DROP TABLE  accounts CASCADE CONSTRAINTS";
	  		try( Statement statement = connection.createStatement() ) {
				try{
					int updates = statement.executeUpdate( query );
			
				}catch(SQLException e){
					e.printStackTrace();
					all_succeeded = false;
				}
			}catch(SQLException e){
				e.printStackTrace();
				all_succeeded = false;
			}						   

			query = "DROP TABLE  pocketlinks CASCADE CONSTRAINTS";
			try( Statement statement = connection.createStatement() ) {
				try{
					int updates = statement.executeUpdate( query );
			
				}catch(SQLException e){
					e.printStackTrace();
					all_succeeded = false;
				}
			}catch(SQLException e){
				e.printStackTrace();
				all_succeeded = false;
			}

			query = "DROP TABLE  transactions CASCADE CONSTRAINTS";
			try( Statement statement = connection.createStatement() ) {
				try{
					int updates = statement.executeUpdate( query );
				
				}catch(SQLException e){
					e.printStackTrace();
					all_succeeded = false;
				}
			}catch(SQLException e){
				e.printStackTrace();
				all_succeeded = false;
			}

			query = "DROP TABLE  custaccounts CASCADE CONSTRAINTS";
			try( Statement statement = connection.createStatement() ) {
				try{
					int updates = statement.executeUpdate( query );
				
				}catch(SQLException e){
					e.printStackTrace();
					all_succeeded = false;
				}
			}catch(SQLException e){
				e.printStackTrace();
				all_succeeded = false;
			}

			query = "DROP TABLE  bank CASCADE CONSTRAINTS";
			try( Statement statement = connection.createStatement() ) {
				try{
					int updates = statement.executeUpdate( query );
		
				}catch(SQLException e){
					e.printStackTrace();
					all_succeeded = false;
				}
			}catch(SQLException e){
				e.printStackTrace();
				all_succeeded = false;
			}

		}


		return all_succeeded;
	}

}

